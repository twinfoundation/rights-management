{
	"openapi": "3.1.0",
	"info": {
		"title": "TWIN - Test Endpoints",
		"description": "REST API for TWIN - Test Endpoints.",
		"version": "1.0.0",
		"license": {
			"name": "Apache 2.0 License",
			"url": "https://opensource.org/licenses/Apache-2.0"
		}
	},
	"servers": [
		{
			"url": "https://localhost"
		}
	],
	"tags": [
		{
			"name": "Policy Administration Point",
			"description": "Endpoints for managing ODRL policies in the Policy Administration Point"
		}
	],
	"paths": {
		"/rights-management/pap": {
			"post": {
				"operationId": "papCreate",
				"summary": "Create a policy",
				"tags": [
					"Policy Administration Point"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "The request structure for creating a policy.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PapCreateRequest"
							},
							"examples": {
								"papCreateExample": {
									"value": {
										"policy": {
											"@context": "https://www.w3.org/ns/odrl/2/",
											"@type": "Set",
											"permission": [
												{
													"target": "http://example.com/asset/1",
													"action": "use"
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response.",
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. urn:rights-management:abc123def456"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"put": {
				"operationId": "papUpdate",
				"summary": "Update a policy",
				"tags": [
					"Policy Administration Point"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "The request structure for updating a policy.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PapUpdateRequest"
							},
							"examples": {
								"papUpdateExample": {
									"value": {
										"policy": {
											"@context": "https://www.w3.org/ns/odrl/2/",
											"@type": "Set",
											"uid": "http://example.com/policy/1",
											"permission": [
												{
													"target": "http://example.com/asset/2",
													"action": "read"
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/rights-management/pap/{id}": {
			"get": {
				"operationId": "papRetrieve",
				"summary": "Retrieve a policy",
				"tags": [
					"Policy Administration Point"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The ID of the policy to retrieve.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "http://example.com/policy/1"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "The response structure for retrieving a policy.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OdrlPolicy"
								},
								"examples": {
									"papRetrieveResponseExample": {
										"value": {
											"@context": "https://www.w3.org/ns/odrl/2/",
											"@type": "Set",
											"uid": "http://example.com/policy/1",
											"permission": [
												{
													"target": "http://example.com/asset/1",
													"action": "use"
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "papRemove",
				"summary": "Remove a policy",
				"tags": [
					"Policy Administration Point"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The ID of the policy to remove.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "http://example.com/policy/1"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/rights-management/pap/query": {
			"get": {
				"operationId": "papQuery",
				"summary": "Query policies",
				"tags": [
					"Policy Administration Point"
				],
				"parameters": [
					{
						"name": "conditions",
						"description": "The condition for the query.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The number of entries to return per page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "cursor",
						"description": "The cursor to get next chunk of data, returned in previous response.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "optional-pagination-cursor"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "The response structure for querying policies.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PapQueryResponse"
								},
								"examples": {
									"papQueryResponseExample": {
										"value": {
											"cursor": "next-page-cursor",
											"policies": [
												{
													"@context": "https://www.w3.org/ns/odrl/2/",
													"@type": "Set",
													"uid": "http://example.com/policy/1",
													"permission": [
														{
															"target": "http://example.com/asset/1",
															"action": "use"
														}
													]
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"ActionType": {
				"anyOf": [
					{
						"type": "string",
						"const": "use",
						"description": "To use the Asset - actions that involve general usage by parties."
					},
					{
						"type": "string",
						"const": "transfer",
						"description": "To transfer the ownership to third parties."
					},
					{
						"type": "string",
						"const": "acceptTracking",
						"description": "To accept that the use of the Asset may be tracked."
					},
					{
						"type": "string",
						"const": "aggregate",
						"description": "To use the Asset or parts of it as part of a composite collection."
					},
					{
						"type": "string",
						"const": "annotate",
						"description": "To add explanatory notations/commentaries to the Asset without modifying the Asset in any other way."
					},
					{
						"type": "string",
						"const": "anonymize",
						"description": "To anonymize all or parts of the Asset."
					},
					{
						"type": "string",
						"const": "archive",
						"description": "To store the Asset (in a non-transient form)."
					},
					{
						"type": "string",
						"const": "attribute",
						"description": "To attribute the use of the Asset."
					},
					{
						"type": "string",
						"const": "attribution",
						"description": "Credit be given to copyright holder and/or author."
					},
					{
						"type": "string",
						"const": "commercialUse",
						"description": "Exercising rights for commercial purposes."
					},
					{
						"type": "string",
						"const": "compensate",
						"description": "To compensate by transfer of some amount of value for using or selling the Asset."
					},
					{
						"type": "string",
						"const": "concurrentUse",
						"description": "To create multiple copies of the Asset that are being concurrently used."
					},
					{
						"type": "string",
						"const": "delete",
						"description": "To permanently remove all copies of the Asset after it has been used."
					},
					{
						"type": "string",
						"const": "derive",
						"description": "To create a new derivative Asset from this Asset and to edit or modify the derivative."
					},
					{
						"type": "string",
						"const": "derivativeWorks",
						"description": "Distribution of derivative works."
					},
					{
						"type": "string",
						"const": "digitize",
						"description": "To produce a digital copy of (or otherwise digitize) the Asset from its analogue form."
					},
					{
						"type": "string",
						"const": "display",
						"description": "To create a static and transient rendition of an Asset."
					},
					{
						"type": "string",
						"const": "distribute",
						"description": "To supply the Asset to third-parties."
					},
					{
						"type": "string",
						"const": "distribution",
						"description": "Distribution, public display, and publicly performance."
					},
					{
						"type": "string",
						"const": "ensureExclusivity",
						"description": "To ensure that the Rule on the Asset is exclusive."
					},
					{
						"type": "string",
						"const": "execute",
						"description": "To run the computer program Asset."
					},
					{
						"type": "string",
						"const": "extract",
						"description": "To extract parts of the Asset and to use it as a new Asset."
					},
					{
						"type": "string",
						"const": "give",
						"description": "To transfer the ownership without compensation and while deleting the original asset."
					},
					{
						"type": "string",
						"const": "grantUse",
						"description": "To grant the use of the Asset to third parties."
					},
					{
						"type": "string",
						"const": "include",
						"description": "To include other related assets in the Asset."
					},
					{
						"type": "string",
						"const": "index",
						"description": "To record the Asset in an index."
					},
					{
						"type": "string",
						"const": "inform",
						"description": "To inform that an action has been performed on or in relation to the Asset."
					},
					{
						"type": "string",
						"const": "install",
						"description": "To load the computer program Asset onto a storage device."
					},
					{
						"type": "string",
						"const": "modify",
						"description": "To change existing content of the Asset without creating a new asset."
					},
					{
						"type": "string",
						"const": "move",
						"description": "To move the Asset from one digital location to another including deleting the original copy."
					},
					{
						"type": "string",
						"const": "nextPolicy",
						"description": "To grant the specified Policy to a third party for their use of the Asset."
					},
					{
						"type": "string",
						"const": "notice",
						"description": "Copyright and license notices be kept intact."
					},
					{
						"type": "string",
						"const": "obtainConsent",
						"description": "To obtain verifiable consent to perform the requested action."
					},
					{
						"type": "string",
						"const": "play",
						"description": "To create a sequential and transient rendition of an Asset."
					},
					{
						"type": "string",
						"const": "present",
						"description": "To publicly perform the Asset."
					},
					{
						"type": "string",
						"const": "print",
						"description": "To create a tangible and permanent rendition of an Asset."
					},
					{
						"type": "string",
						"const": "read",
						"description": "To obtain data from the Asset."
					},
					{
						"type": "string",
						"const": "reproduce",
						"description": "To make duplicate copies of the Asset in any material form."
					},
					{
						"type": "string",
						"const": "reproduction",
						"description": "Making multiple copies."
					},
					{
						"type": "string",
						"const": "reviewPolicy",
						"description": "To review the Policy applicable to the Asset."
					},
					{
						"type": "string",
						"const": "sell",
						"description": "To transfer the ownership with compensation and while deleting the original asset."
					},
					{
						"type": "string",
						"const": "shareAlike",
						"description": "Derivative works be licensed under the same terms or compatible terms."
					},
					{
						"type": "string",
						"const": "sharing",
						"description": "Permits commercial derivatives, but only non-commercial distribution."
					},
					{
						"type": "string",
						"const": "sourceCode",
						"description": "Source code must be provided when exercising some rights."
					},
					{
						"type": "string",
						"const": "stream",
						"description": "To deliver the Asset in real-time."
					},
					{
						"type": "string",
						"const": "synchronize",
						"description": "To use the Asset in timed relations with media elements of another Asset."
					},
					{
						"type": "string",
						"const": "textToSpeech",
						"description": "To have a text Asset read out loud."
					},
					{
						"type": "string",
						"const": "transform",
						"description": "To convert the Asset into a different format."
					},
					{
						"type": "string",
						"const": "translate",
						"description": "To translate the Asset into another natural language."
					},
					{
						"type": "string",
						"const": "uninstall",
						"description": "To unload and delete the computer program Asset."
					},
					{
						"type": "string",
						"const": "watermark",
						"description": "To apply a watermark to the Asset."
					}
				],
				"description": "The types for ODRL Actions."
			},
			"ConflictStrategyType": {
				"anyOf": [
					{
						"type": "string",
						"const": "perm",
						"description": "Permission type."
					},
					{
						"type": "string",
						"const": "prohibit",
						"description": "Prohibition type."
					},
					{
						"type": "string",
						"const": "invalid",
						"description": "Invalid type."
					}
				],
				"description": "The types for ODRL Conflict Resolution Strategies."
			},
			"Error": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name for the error."
					},
					"message": {
						"type": "string",
						"description": "The message for the error."
					},
					"source": {
						"type": "string",
						"description": "The source of the error."
					},
					"properties": {
						"type": "object",
						"additionalProperties": {},
						"description": "Any additional information for the error."
					},
					"stack": {
						"type": "string",
						"description": "The stack trace for the error."
					},
					"inner": {
						"$ref": "#/components/schemas/Error"
					}
				},
				"required": [
					"name",
					"message"
				],
				"additionalProperties": false,
				"description": "Model to describe serialized error."
			},
			"JsonLdContainerType": {
				"type": "string",
				"enum": [
					"@language",
					"@index",
					"@id",
					"@graph",
					"@type"
				],
				"description": "Helper Types"
			},
			"JsonLdContainerTypeArray": {
				"anyOf": [
					{
						"type": "array",
						"minItems": 2,
						"items": [
							{
								"type": "string",
								"const": "@graph"
							},
							{
								"type": "string",
								"const": "@id"
							}
						],
						"maxItems": 2
					},
					{
						"type": "array",
						"minItems": 2,
						"items": [
							{
								"type": "string",
								"const": "@id"
							},
							{
								"type": "string",
								"const": "@graph"
							}
						],
						"maxItems": 2
					},
					{
						"type": "array",
						"minItems": 3,
						"items": [
							{
								"type": "string",
								"const": "@set"
							},
							{
								"type": "string",
								"const": "@graph"
							},
							{
								"type": "string",
								"const": "@id"
							}
						],
						"maxItems": 3
					},
					{
						"type": "array",
						"minItems": 3,
						"items": [
							{
								"type": "string",
								"const": "@set"
							},
							{
								"type": "string",
								"const": "@id"
							},
							{
								"type": "string",
								"const": "@graph"
							}
						],
						"maxItems": 3
					},
					{
						"type": "array",
						"minItems": 3,
						"items": [
							{
								"type": "string",
								"const": "@graph"
							},
							{
								"type": "string",
								"const": "@set"
							},
							{
								"type": "string",
								"const": "@id"
							}
						],
						"maxItems": 3
					},
					{
						"type": "array",
						"minItems": 3,
						"items": [
							{
								"type": "string",
								"const": "@id"
							},
							{
								"type": "string",
								"const": "@set"
							},
							{
								"type": "string",
								"const": "@graph"
							}
						],
						"maxItems": 3
					},
					{
						"type": "array",
						"minItems": 3,
						"items": [
							{
								"type": "string",
								"const": "@graph"
							},
							{
								"type": "string",
								"const": "@id"
							},
							{
								"type": "string",
								"const": "@set"
							}
						],
						"maxItems": 3
					},
					{
						"type": "array",
						"minItems": 3,
						"items": [
							{
								"type": "string",
								"const": "@id"
							},
							{
								"type": "string",
								"const": "@graph"
							},
							{
								"type": "string",
								"const": "@set"
							}
						],
						"maxItems": 3
					},
					{
						"type": "array",
						"minItems": 2,
						"items": [
							{
								"type": "string",
								"const": "@set"
							},
							{
								"$ref": "#/components/schemas/JsonLdContainerType"
							}
						],
						"maxItems": 2
					},
					{
						"type": "array",
						"minItems": 2,
						"items": [
							{
								"$ref": "#/components/schemas/JsonLdContainerType"
							},
							{
								"type": "string",
								"const": "@set"
							}
						],
						"maxItems": 2
					}
				],
				"description": "Helper Types."
			},
			"JsonLdContextDefinition": {
				"type": "object",
				"properties": {
					"@base": {
						"type": [
							"string",
							"null"
						]
					},
					"@direction": {
						"type": [
							"string",
							"null"
						],
						"enum": [
							"ltr",
							"rtl",
							null
						]
					},
					"@import": {
						"type": "string"
					},
					"@language": {
						"type": "string"
					},
					"@propagate": {
						"type": "boolean"
					},
					"@protected": {
						"type": "boolean"
					},
					"@type": {
						"type": "object",
						"properties": {
							"@container": {
								"type": "string",
								"const": "@set"
							},
							"@protected": {
								"type": "boolean"
							}
						},
						"required": [
							"@container"
						],
						"additionalProperties": false
					},
					"@version": {
						"type": "string",
						"const": "1.1"
					},
					"@vocab": {
						"type": [
							"string",
							"null"
						]
					}
				},
				"additionalProperties": {
					"anyOf": [
						{
							"type": "null"
						},
						{
							"type": "string"
						},
						{
							"$ref": "#/components/schemas/JsonLdExpandedTermDefinition"
						}
					]
				},
				"description": "A context definition defines a local context in a node object."
			},
			"JsonLdContextDefinitionElement": {
				"anyOf": [
					{
						"type": "null"
					},
					{
						"type": "string"
					},
					{
						"$ref": "#/components/schemas/JsonLdContextDefinition"
					}
				],
				"description": "A context definition element is used to define the types of a context definition."
			},
			"JsonLdContextDefinitionRoot": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/JsonLdContextDefinitionElement"
					},
					{
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/JsonLdContextDefinitionElement"
						}
					}
				],
				"description": "A context definition root is used to define the root of a context definition."
			},
			"JsonLdExpandedTermDefinition": {
				"anyOf": [
					{
						"type": "object",
						"additionalProperties": false,
						"properties": {
							"@id": {
								"anyOf": [
									{
										"type": "string"
									},
									{
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									{
										"type": "null"
									}
								]
							},
							"@nest": {
								"type": "string"
							},
							"@container": {
								"anyOf": [
									{
										"type": "string",
										"const": "@list"
									},
									{
										"type": "string",
										"const": "@set"
									},
									{
										"$ref": "#/components/schemas/JsonLdContainerType"
									},
									{
										"type": "array",
										"items": {
											"anyOf": [
												{
													"type": "string",
													"const": "@list"
												},
												{
													"type": "string",
													"const": "@set"
												},
												{
													"$ref": "#/components/schemas/JsonLdContainerType"
												}
											]
										}
									},
									{
										"$ref": "#/components/schemas/JsonLdContainerTypeArray"
									},
									{
										"type": "null"
									}
								]
							},
							"@type": {
								"type": "string"
							},
							"@language": {
								"type": "string"
							},
							"@index": {
								"type": "string"
							},
							"@context": {
								"$ref": "#/components/schemas/JsonLdContextDefinition"
							},
							"@prefix": {
								"type": "boolean"
							},
							"@propagate": {
								"type": "boolean"
							},
							"@protected": {
								"type": "boolean"
							}
						}
					},
					{
						"type": "object",
						"additionalProperties": false,
						"properties": {
							"@reverse": {
								"type": "string"
							},
							"@container": {
								"type": [
									"string",
									"null"
								],
								"enum": [
									"@set",
									"@index",
									null
								]
							},
							"@type": {
								"type": "string"
							},
							"@language": {
								"type": "string"
							},
							"@index": {
								"type": "string"
							},
							"@context": {
								"$ref": "#/components/schemas/JsonLdContextDefinition"
							},
							"@prefix": {
								"type": "boolean"
							},
							"@propagate": {
								"type": "boolean"
							},
							"@protected": {
								"type": "boolean"
							}
						},
						"required": [
							"@reverse"
						]
					}
				],
				"description": "An expanded term definition is used to describe the mapping between a term and its expanded identifier, as well as other properties of the value associated with the term when it is used as key in a node object."
			},
			"JsonLdGraphObject": {
				"type": "object",
				"properties": {
					"@graph": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdNodeObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdNodeObject"
								}
							}
						]
					},
					"@index": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@id": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@context": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					}
				},
				"required": [
					"@graph"
				],
				"additionalProperties": false,
				"description": "A graph object represents a named graph, which MAY include an explicit graph name."
			},
			"JsonLdIdMap": {
				"type": "object",
				"additionalProperties": {
					"$ref": "#/components/schemas/JsonLdNodeObject"
				},
				"description": "An id map is used to associate an IRI with a value that allows easy programmatic access."
			},
			"JsonLdIncludedBlock": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/JsonLdNodeObject"
					},
					{
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/JsonLdNodeObject"
						}
					}
				],
				"description": "An included block is used to provide a set of node objects."
			},
			"JsonLdIndexMap": {
				"type": "object",
				"additionalProperties": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/JsonLdIndexMapItem"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/components/schemas/JsonLdIndexMapItem"
							}
						}
					]
				},
				"description": "An index map allows keys that have no semantic meaning, but should be preserved regardless, to be used in JSON-LD documents."
			},
			"JsonLdIndexMapItem": {
				"anyOf": [
					{
						"type": "null"
					},
					{
						"type": "boolean"
					},
					{
						"type": "number"
					},
					{
						"type": "string"
					},
					{
						"$ref": "#/components/schemas/JsonLdNodeObject"
					},
					{
						"$ref": "#/components/schemas/JsonLdValueObject"
					},
					{
						"$ref": "#/components/schemas/JsonLdListObject"
					},
					{
						"$ref": "#/components/schemas/JsonLdSetObject"
					}
				],
				"description": "The items that can be stored in an index map."
			},
			"JsonLdJsonArray": {
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/JsonLdJsonValue"
				},
				"description": "JSON Type for array."
			},
			"JsonLdJsonObject": {
				"type": "object",
				"additionalProperties": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/JsonLdJsonValue"
						},
						{
							"not": {}
						}
					]
				},
				"description": "JSON Type for object."
			},
			"JsonLdJsonPrimitive": {
				"type": [
					"string",
					"number",
					"boolean",
					"null"
				],
				"description": "JSON Primitive."
			},
			"JsonLdJsonValue": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/JsonLdJsonPrimitive"
					},
					{
						"$ref": "#/components/schemas/JsonLdJsonArray"
					},
					{
						"$ref": "#/components/schemas/JsonLdJsonObject"
					}
				],
				"description": "JSON Value."
			},
			"JsonLdKeyword": {
				"type": "object",
				"properties": {
					"@base": {
						"type": [
							"string",
							"null"
						]
					},
					"@container": {
						"anyOf": [
							{
								"type": "string",
								"const": "@list"
							},
							{
								"type": "string",
								"const": "@set"
							},
							{
								"$ref": "#/components/schemas/JsonLdContainerType"
							},
							{
								"type": "array",
								"items": {
									"anyOf": [
										{
											"type": "string",
											"const": "@list"
										},
										{
											"type": "string",
											"const": "@set"
										},
										{
											"$ref": "#/components/schemas/JsonLdContainerType"
										}
									]
								}
							},
							{
								"$ref": "#/components/schemas/JsonLdContainerTypeArray"
							},
							{
								"type": "null"
							}
						]
					},
					"@context": {
						"$ref": "#/components/schemas/JsonLdContextDefinitionRoot"
					},
					"@direction": {
						"type": [
							"string",
							"null"
						],
						"enum": [
							"ltr",
							"rtl",
							null
						]
					},
					"@graph": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdValueObject"
							},
							{
								"$ref": "#/components/schemas/JsonLdNodeObject"
							},
							{
								"type": "array",
								"items": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/JsonLdValueObject"
										},
										{
											"$ref": "#/components/schemas/JsonLdNodeObject"
										}
									]
								}
							}
						]
					},
					"@id": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						]
					},
					"@import": {
						"type": "string"
					},
					"@included": {
						"$ref": "#/components/schemas/JsonLdIncludedBlock"
					},
					"@index": {
						"type": "string"
					},
					"@json": {
						"type": "string",
						"const": "@json"
					},
					"@language": {
						"type": "string"
					},
					"@list": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdListOrSetItem"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdListOrSetItem"
								}
							}
						]
					},
					"@nest": {
						"type": "object"
					},
					"@none": {
						"type": "string",
						"const": "@none"
					},
					"@prefix": {
						"type": "boolean"
					},
					"@propagate": {
						"type": "boolean"
					},
					"@protected": {
						"type": "boolean"
					},
					"@reverse": {
						"type": "string"
					},
					"@set": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdListOrSetItem"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdListOrSetItem"
								}
							}
						]
					},
					"@type": {
						"type": "string"
					},
					"@value": {
						"type": [
							"null",
							"boolean",
							"number",
							"string"
						]
					},
					"@version": {
						"type": "string",
						"const": "1.1"
					},
					"@vocab": {
						"type": [
							"string",
							"null"
						]
					}
				},
				"required": [
					"@base",
					"@container",
					"@context",
					"@direction",
					"@graph",
					"@id",
					"@import",
					"@included",
					"@index",
					"@json",
					"@language",
					"@list",
					"@nest",
					"@none",
					"@prefix",
					"@propagate",
					"@protected",
					"@reverse",
					"@set",
					"@type",
					"@value",
					"@version",
					"@vocab"
				],
				"additionalProperties": false,
				"description": "A list of keywords and their types. Only used for internal reference; not an actual interface. Not for export."
			},
			"JsonLdLanguageMap": {
				"type": "object",
				"additionalProperties": {
					"anyOf": [
						{
							"type": "null"
						},
						{
							"type": "string"
						},
						{
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					]
				},
				"description": "A language map is used to associate a language with a value in a way that allows easy programmatic access."
			},
			"JsonLdListObject": {
				"type": "object",
				"properties": {
					"@list": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@index": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					}
				},
				"required": [
					"@list"
				],
				"additionalProperties": false,
				"description": "A list represents an ordered set of values."
			},
			"JsonLdListOrSetItem": {
				"anyOf": [
					{
						"type": "null"
					},
					{
						"type": "boolean"
					},
					{
						"type": "number"
					},
					{
						"type": "string"
					},
					{
						"$ref": "#/components/schemas/JsonLdNodeObject"
					},
					{
						"$ref": "#/components/schemas/JsonLdValueObject"
					}
				],
				"description": "A list or set item can be a null, boolean, number, string, node object, or value object."
			},
			"JsonLdNodeObject": {
				"type": "object",
				"additionalProperties": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/JsonLdNodePrimitive"
						},
						{
							"$ref": "#/components/schemas/JsonLdLanguageMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIndexMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIncludedBlock"
						},
						{
							"$ref": "#/components/schemas/JsonLdIdMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdTypeMap"
						},
						{
							"type": "array"
						}
					]
				},
				"properties": {
					"@context": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@id": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@included": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@graph": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdNodeObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdNodeObject"
								}
							}
						]
					},
					"@nest": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdJsonObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdJsonObject"
								}
							}
						]
					},
					"@type": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdKeyword"
								}
							}
						]
					},
					"@reverse": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/JsonLdKeyword"
						}
					},
					"@index": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					}
				},
				"description": "A node object represents zero or more properties of a node in the graph serialized by the JSON-LD document."
			},
			"JsonLdNodePrimitive": {
				"anyOf": [
					{
						"type": "null"
					},
					{
						"type": "boolean"
					},
					{
						"type": "number"
					},
					{
						"type": "string"
					},
					{
						"$ref": "#/components/schemas/JsonLdNodeObject"
					},
					{
						"$ref": "#/components/schemas/JsonLdGraphObject"
					},
					{
						"$ref": "#/components/schemas/JsonLdValueObject"
					},
					{
						"$ref": "#/components/schemas/JsonLdListObject"
					},
					{
						"$ref": "#/components/schemas/JsonLdSetObject"
					}
				],
				"description": "A node primitive is a JSON-LD value which is not one of the defined NodeObject properties."
			},
			"JsonLdSetObject": {
				"type": "object",
				"properties": {
					"@set": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@index": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					}
				},
				"required": [
					"@set"
				],
				"additionalProperties": false,
				"description": "A set represents an unordered set of values."
			},
			"JsonLdTypeMap": {
				"type": "object",
				"additionalProperties": {
					"anyOf": [
						{
							"type": "string"
						},
						{
							"$ref": "#/components/schemas/JsonLdNodeObject"
						}
					]
				},
				"description": "A type map is used to associate an IRI with a value that allows easy programmatic access."
			},
			"JsonLdValueObject": {
				"anyOf": [
					{
						"type": "object",
						"additionalProperties": false,
						"properties": {
							"@value": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@language": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@direction": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@index": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@context": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							}
						},
						"required": [
							"@value"
						]
					},
					{
						"type": "object",
						"additionalProperties": false,
						"properties": {
							"@value": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@type": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@index": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@context": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							}
						},
						"required": [
							"@type",
							"@value"
						]
					},
					{
						"type": "object",
						"additionalProperties": false,
						"properties": {
							"@value": {
								"anyOf": [
									{
										"$ref": "#/components/schemas/JsonLdKeyword"
									},
									{
										"$ref": "#/components/schemas/JsonLdJsonObject"
									},
									{
										"$ref": "#/components/schemas/JsonLdJsonArray"
									}
								]
							},
							"@type": {
								"type": "string",
								"const": "@json"
							},
							"@index": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							"@context": {
								"$ref": "#/components/schemas/JsonLdKeyword"
							}
						},
						"required": [
							"@type",
							"@value"
						]
					}
				],
				"description": "A value object is used to explicitly associate a type or a language with a value to create a typed value or a language-tagged string and possibly associate a base direction."
			},
			"LeftOperandType": {
				"anyOf": [
					{
						"type": "string",
						"const": "absolutePosition",
						"description": "Absolute Position type."
					},
					{
						"type": "string",
						"const": "absoluteSpatialPosition",
						"description": "Absolute Spatial Position type."
					},
					{
						"type": "string",
						"const": "absoluteTemporalPosition",
						"description": "Absolute Temporal Position type."
					},
					{
						"type": "string",
						"const": "absoluteSize",
						"description": "Absolute Size type."
					},
					{
						"type": "string",
						"const": "count",
						"description": "Count type."
					},
					{
						"type": "string",
						"const": "dateTime",
						"description": "DateTime type."
					},
					{
						"type": "string",
						"const": "delayPeriod",
						"description": "Delay Period type."
					},
					{
						"type": "string",
						"const": "deliveryChannel",
						"description": "Delivery Channel type."
					},
					{
						"type": "string",
						"const": "elapsedTime",
						"description": "Elapsed Time type."
					},
					{
						"type": "string",
						"const": "event",
						"description": "Event type."
					},
					{
						"type": "string",
						"const": "fileFormat",
						"description": "File Format type."
					},
					{
						"type": "string",
						"const": "industry",
						"description": "Industry type."
					},
					{
						"type": "string",
						"const": "language",
						"description": "Language type."
					},
					{
						"type": "string",
						"const": "media",
						"description": "Media type."
					},
					{
						"type": "string",
						"const": "meteredTime",
						"description": "Metered Time type."
					},
					{
						"type": "string",
						"const": "payAmount",
						"description": "Pay Amount type."
					},
					{
						"type": "string",
						"const": "percentage",
						"description": "Percentage type."
					},
					{
						"type": "string",
						"const": "product",
						"description": "Product type."
					},
					{
						"type": "string",
						"const": "purpose",
						"description": "Purpose type."
					},
					{
						"type": "string",
						"const": "recipient",
						"description": "Recipient type."
					},
					{
						"type": "string",
						"const": "relativePosition",
						"description": "Relative Position type."
					},
					{
						"type": "string",
						"const": "relativeSpatialPosition",
						"description": "Relative Spatial Position type."
					},
					{
						"type": "string",
						"const": "relativeTemporalPosition",
						"description": "Relative Temporal Position type."
					},
					{
						"type": "string",
						"const": "relativeSize",
						"description": "Relative Size type."
					},
					{
						"type": "string",
						"const": "resolution",
						"description": "Resolution type."
					},
					{
						"type": "string",
						"const": "spatial",
						"description": "Spatial type."
					},
					{
						"type": "string",
						"const": "spatialCoordinates",
						"description": "Spatial Coordinates type."
					},
					{
						"type": "string",
						"const": "systemDevice",
						"description": "System Device type."
					},
					{
						"type": "string",
						"const": "timeInterval",
						"description": "Time Interval type."
					},
					{
						"type": "string",
						"const": "unitOfCount",
						"description": "Unit of Count type."
					},
					{
						"type": "string",
						"const": "version",
						"description": "Version type."
					},
					{
						"type": "string",
						"const": "virtualLocation",
						"description": "Virtual Location type."
					}
				],
				"description": "The types for ODRL Data Types."
			},
			"OdrlAction": {
				"type": "object",
				"properties": {
					"@context": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@id": {
						"type": "string",
						"description": "Direct action identifier. Used in simple action references."
					},
					"@included": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@graph": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdNodeObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdNodeObject"
								}
							}
						]
					},
					"@nest": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdJsonObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdJsonObject"
								}
							}
						]
					},
					"@type": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdKeyword"
								}
							}
						]
					},
					"@reverse": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/JsonLdKeyword"
						}
					},
					"@index": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"rdf:value": {
						"type": "object",
						"properties": {
							"@id": {
								"type": "string"
							}
						},
						"required": [
							"@id"
						],
						"additionalProperties": false,
						"description": "The value/identifier of the action. Used in complex action definitions."
					},
					"refinement": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/OdrlConstraint"
							},
							{
								"$ref": "#/components/schemas/OdrlLogicalConstraint"
							},
							{
								"type": "array",
								"items": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/OdrlConstraint"
										},
										{
											"$ref": "#/components/schemas/OdrlLogicalConstraint"
										}
									]
								}
							}
						],
						"description": "Refinements applied to the action."
					},
					"includedIn": {
						"$ref": "#/components/schemas/ActionType"
					},
					"implies": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ActionType"
						},
						"description": "References to actions this action implies."
					}
				},
				"additionalProperties": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/JsonLdNodePrimitive"
						},
						{
							"$ref": "#/components/schemas/JsonLdLanguageMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIndexMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIncludedBlock"
						},
						{
							"$ref": "#/components/schemas/JsonLdIdMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdTypeMap"
						},
						{
							"type": "array"
						}
					]
				},
				"description": "Interface for ODRL Actions."
			},
			"OdrlAsset": {
				"type": "object",
				"properties": {
					"@context": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@id": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@included": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@graph": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdNodeObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdNodeObject"
								}
							}
						]
					},
					"@nest": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdJsonObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdJsonObject"
								}
							}
						]
					},
					"@type": {
						"type": "string",
						"description": "The type of the asset. Can be used to specify additional type information."
					},
					"@reverse": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/JsonLdKeyword"
						}
					},
					"@index": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"uid": {
						"type": "string",
						"description": "The unique identifier for the asset. Should be an IRI."
					},
					"partOf": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/OdrlAssetCollection"
							}
						],
						"description": "Reference to the asset collection this asset is part of. Used to identify an AssetCollection that this Asset is a member of."
					},
					"hasPolicy": {
						"type": "string",
						"description": "Reference to the policy that governs this asset. Used to identify the Policy that governs this Asset."
					}
				},
				"additionalProperties": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/JsonLdNodePrimitive"
						},
						{
							"$ref": "#/components/schemas/JsonLdLanguageMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIndexMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIncludedBlock"
						},
						{
							"$ref": "#/components/schemas/JsonLdIdMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdTypeMap"
						},
						{
							"type": "array"
						}
					]
				},
				"description": "Interface for ODRL Assets."
			},
			"OdrlAssetCollection": {
				"type": "object",
				"properties": {
					"@context": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@id": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@included": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@graph": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdNodeObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdNodeObject"
								}
							}
						]
					},
					"@nest": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdJsonObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdJsonObject"
								}
							}
						]
					},
					"@type": {
						"type": "string",
						"description": "The type of the asset. Can be used to specify additional type information."
					},
					"@reverse": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/JsonLdKeyword"
						}
					},
					"@index": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"uid": {
						"type": "string",
						"description": "The unique identifier for the asset. Should be an IRI."
					},
					"partOf": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/OdrlAssetCollection"
							}
						],
						"description": "Reference to the asset collection this asset is part of. Used to identify an AssetCollection that this Asset is a member of."
					},
					"hasPolicy": {
						"type": "string",
						"description": "Reference to the policy that governs this asset. Used to identify the Policy that governs this Asset."
					},
					"source": {
						"type": "string",
						"description": "Reference to the source of the asset collection. Must be an IRI that references the AssetCollection."
					},
					"refinement": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/OdrlConstraint"
						},
						"description": "Refinements applied to the asset collection. Used to specify the refinement context under which to identify individual Asset(s) of the complete collection. The refinement applies to the characteristics of each member of the collection (not the resource as a whole)."
					}
				},
				"required": [
					"source"
				],
				"additionalProperties": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/JsonLdNodePrimitive"
						},
						{
							"$ref": "#/components/schemas/JsonLdLanguageMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIndexMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIncludedBlock"
						},
						{
							"$ref": "#/components/schemas/JsonLdIdMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdTypeMap"
						},
						{
							"type": "array"
						}
					]
				},
				"description": "Interface for ODRL Asset Collections. An AssetCollection is a single resource representing a set of member resources, where all members of the set will be the subject of the Rule."
			},
			"OdrlConstraint": {
				"type": "object",
				"properties": {
					"@context": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@id": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@included": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@graph": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdNodeObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdNodeObject"
								}
							}
						]
					},
					"@nest": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdJsonObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdJsonObject"
								}
							}
						]
					},
					"@type": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdKeyword"
								}
							}
						]
					},
					"@reverse": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/JsonLdKeyword"
						}
					},
					"@index": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"uid": {
						"type": "string",
						"description": "Optional unique identifier for the constraint."
					},
					"leftOperand": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/LeftOperandType"
							}
						],
						"description": "The left operand of the constraint."
					},
					"operator": {
						"$ref": "#/components/schemas/OperatorType"
					},
					"rightOperand": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "object",
								"properties": {
									"@value": {
										"type": "string"
									},
									"@type": {
										"type": "string"
									}
								},
								"required": [
									"@value"
								],
								"additionalProperties": false
							},
							{
								"type": "object",
								"properties": {
									"@id": {
										"type": "string"
									}
								},
								"required": [
									"@id"
								],
								"additionalProperties": false
							}
						],
						"description": "The right operand of the constraint. value with optional"
					},
					"rightOperandReference": {
						"type": "string",
						"description": "Reference to the right operand."
					},
					"dataType": {
						"type": "string",
						"description": "The data type of the right operand."
					},
					"unit": {
						"type": "string",
						"description": "The unit for the right operand value."
					},
					"status": {
						"$ref": "#/components/schemas/StatusType"
					}
				},
				"required": [
					"leftOperand",
					"operator"
				],
				"additionalProperties": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/JsonLdNodePrimitive"
						},
						{
							"$ref": "#/components/schemas/JsonLdLanguageMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIndexMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIncludedBlock"
						},
						{
							"$ref": "#/components/schemas/JsonLdIdMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdTypeMap"
						},
						{
							"type": "array"
						}
					]
				},
				"description": "Interface for ODRL Constraints."
			},
			"OdrlContextType": {
				"anyOf": [
					{
						"type": "string",
						"const": "https://www.w3.org/ns/odrl/2/"
					},
					{
						"type": "array",
						"minItems": 1,
						"items": [
							{
								"type": "string",
								"const": "https://www.w3.org/ns/odrl/2/"
							}
						],
						"additionalItems": {
							"$ref": "#/components/schemas/JsonLdContextDefinitionElement"
						}
					},
					{
						"type": "array",
						"minItems": 2,
						"items": [
							{
								"type": "string",
								"const": "https://www.w3.org/ns/odrl/2/"
							},
							{
								"$ref": "#/components/schemas/JsonLdContextDefinitionElement"
							}
						],
						"additionalItems": {
							"$ref": "#/components/schemas/JsonLdContextDefinitionElement"
						}
					},
					{
						"type": "array",
						"minItems": 2,
						"items": [
							{
								"$ref": "#/components/schemas/JsonLdContextDefinitionElement"
							},
							{
								"type": "string",
								"const": "https://www.w3.org/ns/odrl/2/"
							}
						],
						"additionalItems": {
							"$ref": "#/components/schemas/JsonLdContextDefinitionElement"
						}
					}
				],
				"description": "The ODRL JSON-LD context type."
			},
			"OdrlDuty": {
				"type": "object",
				"properties": {
					"@context": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@id": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@included": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@graph": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdNodeObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdNodeObject"
								}
							}
						]
					},
					"@nest": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdJsonObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdJsonObject"
								}
							}
						]
					},
					"@type": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdKeyword"
								}
							}
						]
					},
					"@reverse": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/JsonLdKeyword"
						}
					},
					"@index": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"uid": {
						"type": "string",
						"description": "Optional unique identifier for the rule."
					},
					"action": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ActionType"
							},
							{
								"$ref": "#/components/schemas/OdrlAction"
							},
							{
								"type": "array",
								"items": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ActionType"
										},
										{
											"$ref": "#/components/schemas/OdrlAction"
										}
									]
								}
							}
						],
						"description": "The action associated with the rule."
					},
					"target": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/OdrlAsset"
							},
							{
								"type": "array",
								"items": {
									"anyOf": [
										{
											"type": "string"
										},
										{
											"$ref": "#/components/schemas/OdrlAsset"
										}
									]
								}
							}
						],
						"description": "The target asset for the rule."
					},
					"assigner": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/OdrlParty"
							}
						],
						"description": "The assigner of the rule."
					},
					"assignee": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/OdrlParty"
							}
						],
						"description": "The assignee of the rule."
					},
					"constraint": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/OdrlConstraint"
						},
						"description": "Constraints applied to the rule."
					},
					"summary": {
						"type": "string",
						"description": "Additional relation sub-properties as defined in ODRL profiles. For example, 'summary' in profile \"http://example.com/odrl:profile:03\" indicates where the output should be stored."
					},
					"attributedParty": {
						"type": "string",
						"description": "The party to be attributed Used when the duty involves attribution"
					},
					"trackingParty": {
						"type": "string",
						"description": "The party performing the tracking Used when the duty involves tracking"
					},
					"consequence": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/OdrlDuty"
						},
						"description": "The consequences if the duty is not fulfilled. Only applicable when the Duty is referenced by a Rule with duty or obligation properties."
					},
					"remedy": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/OdrlDuty"
						},
						"description": "The remedies that may be fulfilled to cure the violation."
					},
					"compensatedParty": {
						"type": "string",
						"description": "The party to be compensated Used when the duty involves compensation"
					}
				},
				"additionalProperties": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/JsonLdNodePrimitive"
						},
						{
							"$ref": "#/components/schemas/JsonLdLanguageMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIndexMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIncludedBlock"
						},
						{
							"$ref": "#/components/schemas/JsonLdIdMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdTypeMap"
						},
						{
							"type": "array"
						}
					]
				},
				"description": "Interface for Duty Rules. A Duty is the obligation to exercise an action, with all refinements satisfied. A Duty is fulfilled if all constraints are satisfied and if its action has been exercised."
			},
			"OdrlLogicalConstraint": {
				"type": "object",
				"properties": {
					"@context": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@id": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@included": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@graph": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdNodeObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdNodeObject"
								}
							}
						]
					},
					"@nest": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdJsonObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdJsonObject"
								}
							}
						]
					},
					"@type": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdKeyword"
								}
							}
						]
					},
					"@reverse": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/JsonLdKeyword"
						}
					},
					"@index": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"uid": {
						"type": "string",
						"description": "Optional unique identifier for the logical constraint. Must be an IRI."
					},
					"and": {
						"type": "object",
						"properties": {
							"@list": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"@id": {
											"type": "string"
										}
									},
									"required": [
										"@id"
									],
									"additionalProperties": false
								}
							}
						},
						"required": [
							"@list"
						],
						"additionalProperties": false,
						"description": "AND operator - all constraints must be satisfied."
					},
					"or": {
						"type": "object",
						"properties": {
							"@list": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"@id": {
											"type": "string"
										}
									},
									"required": [
										"@id"
									],
									"additionalProperties": false
								}
							}
						},
						"required": [
							"@list"
						],
						"additionalProperties": false,
						"description": "OR operator - at least one constraint must be satisfied."
					},
					"xone": {
						"type": "object",
						"properties": {
							"@list": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"@id": {
											"type": "string"
										}
									},
									"required": [
										"@id"
									],
									"additionalProperties": false
								}
							}
						},
						"required": [
							"@list"
						],
						"additionalProperties": false,
						"description": "XOR operator - exactly one constraint must be satisfied."
					},
					"andSequence": {
						"type": "object",
						"properties": {
							"@list": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"@id": {
											"type": "string"
										}
									},
									"required": [
										"@id"
									],
									"additionalProperties": false
								}
							}
						},
						"required": [
							"@list"
						],
						"additionalProperties": false,
						"description": "AND Sequence operator - all constraints must be satisfied in order."
					}
				},
				"additionalProperties": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/JsonLdNodePrimitive"
						},
						{
							"$ref": "#/components/schemas/JsonLdLanguageMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIndexMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIncludedBlock"
						},
						{
							"$ref": "#/components/schemas/JsonLdIdMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdTypeMap"
						},
						{
							"type": "array"
						}
					]
				},
				"description": "Interface for ODRL Logical Constraints. A Logical Constraint compares two or more existing Constraints by one logical operator. If the comparison returns a logical match, then the Logical Constraint is satisfied."
			},
			"OdrlParty": {
				"type": "object",
				"properties": {
					"@context": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@id": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@included": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@graph": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdNodeObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdNodeObject"
								}
							}
						]
					},
					"@nest": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdJsonObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdJsonObject"
								}
							}
						]
					},
					"@type": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						],
						"description": "The type of the party. Can be used to specify additional type information (e.g., \"Party\", \"vcard:Organization\", \"vcard:Individual\")."
					},
					"@reverse": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/JsonLdKeyword"
						}
					},
					"@index": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"uid": {
						"type": "string",
						"description": "The unique identifier for the party. Must be an IRI."
					},
					"partOf": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/OdrlPartyCollection"
							}
						],
						"description": "Reference to the party collection this party is part of. Used to identify a PartyCollection that a Party entity is a member of."
					},
					"assigneeOf": {
						"type": "string",
						"description": "Reference to a policy where this party is an assignee. When assigneeOf is asserted, the Party MUST be inferred to undertake the assignee functional role of all the Rules of that Policy."
					},
					"assignerOf": {
						"type": "string",
						"description": "Reference to a policy where this party is an assigner. When assignerOf is asserted, the Party MUST be inferred to undertake the assigner functional role of all the Rules of that Policy."
					}
				},
				"additionalProperties": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/JsonLdNodePrimitive"
						},
						{
							"$ref": "#/components/schemas/JsonLdLanguageMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIndexMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIncludedBlock"
						},
						{
							"$ref": "#/components/schemas/JsonLdIdMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdTypeMap"
						},
						{
							"type": "array"
						}
					]
				},
				"description": "Interface for ODRL Parties."
			},
			"OdrlPartyCollection": {
				"type": "object",
				"properties": {
					"@context": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@id": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@included": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@graph": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdNodeObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdNodeObject"
								}
							}
						]
					},
					"@nest": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdJsonObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdJsonObject"
								}
							}
						]
					},
					"@type": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						],
						"description": "The type of the party. Can be used to specify additional type information (e.g., \"Party\", \"vcard:Organization\", \"vcard:Individual\")."
					},
					"@reverse": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/JsonLdKeyword"
						}
					},
					"@index": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"uid": {
						"type": "string",
						"description": "The unique identifier for the party. Must be an IRI."
					},
					"partOf": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/OdrlPartyCollection"
							}
						],
						"description": "Reference to the party collection this party is part of. Used to identify a PartyCollection that a Party entity is a member of."
					},
					"assigneeOf": {
						"type": "string",
						"description": "Reference to a policy where this party is an assignee. When assigneeOf is asserted, the Party MUST be inferred to undertake the assignee functional role of all the Rules of that Policy."
					},
					"assignerOf": {
						"type": "string",
						"description": "Reference to a policy where this party is an assigner. When assignerOf is asserted, the Party MUST be inferred to undertake the assigner functional role of all the Rules of that Policy."
					},
					"source": {
						"type": "string",
						"description": "Reference to the source of the party collection. Used to identify the origin or location of the collection."
					},
					"refinement": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/OdrlConstraint"
						},
						"description": "Refinements applied to the party collection. Used to specify constraints that apply to all members of the collection."
					}
				},
				"required": [
					"source"
				],
				"additionalProperties": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/JsonLdNodePrimitive"
						},
						{
							"$ref": "#/components/schemas/JsonLdLanguageMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIndexMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIncludedBlock"
						},
						{
							"$ref": "#/components/schemas/JsonLdIdMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdTypeMap"
						},
						{
							"type": "array"
						}
					]
				},
				"description": "Interface for ODRL Party Collections. A PartyCollection identifies a collection of entities and is a subclass of Party."
			},
			"OdrlPermission": {
				"type": "object",
				"properties": {
					"@context": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@id": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@included": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@graph": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdNodeObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdNodeObject"
								}
							}
						]
					},
					"@nest": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdJsonObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdJsonObject"
								}
							}
						]
					},
					"@type": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdKeyword"
								}
							}
						]
					},
					"@reverse": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/JsonLdKeyword"
						}
					},
					"@index": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"uid": {
						"type": "string",
						"description": "Optional unique identifier for the rule."
					},
					"action": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ActionType"
							},
							{
								"$ref": "#/components/schemas/OdrlAction"
							},
							{
								"type": "array",
								"items": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ActionType"
										},
										{
											"$ref": "#/components/schemas/OdrlAction"
										}
									]
								}
							}
						],
						"description": "The action associated with the rule."
					},
					"target": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/OdrlAsset"
							},
							{
								"type": "array",
								"items": {
									"anyOf": [
										{
											"type": "string"
										},
										{
											"$ref": "#/components/schemas/OdrlAsset"
										}
									]
								}
							}
						],
						"description": "The target asset for the rule."
					},
					"assigner": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/OdrlParty"
							}
						],
						"description": "The assigner of the rule."
					},
					"assignee": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/OdrlParty"
							}
						],
						"description": "The assignee of the rule."
					},
					"constraint": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/OdrlConstraint"
						},
						"description": "Constraints applied to the rule."
					},
					"summary": {
						"type": "string",
						"description": "Additional relation sub-properties as defined in ODRL profiles. For example, 'summary' in profile \"http://example.com/odrl:profile:03\" indicates where the output should be stored."
					},
					"duty": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/OdrlDuty"
						},
						"description": "The duties that must be fulfilled before the permission can be exercised. A Permission MAY have none, one, or more duty property values."
					}
				},
				"additionalProperties": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/JsonLdNodePrimitive"
						},
						{
							"$ref": "#/components/schemas/JsonLdLanguageMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIndexMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIncludedBlock"
						},
						{
							"$ref": "#/components/schemas/JsonLdIdMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdTypeMap"
						},
						{
							"type": "array"
						}
					]
				},
				"description": "Interface for Permission Rules. A Permission allows an action to be exercised on an Asset if all constraints are satisfied and if all duties are fulfilled."
			},
			"OdrlPolicy": {
				"type": "object",
				"properties": {
					"@context": {
						"$ref": "#/components/schemas/OdrlContextType"
					},
					"@id": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@included": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@graph": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdNodeObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdNodeObject"
								}
							}
						]
					},
					"@nest": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdJsonObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdJsonObject"
								}
							}
						]
					},
					"@type": {
						"$ref": "#/components/schemas/PolicyType"
					},
					"@reverse": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/JsonLdKeyword"
						}
					},
					"@index": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"uid": {
						"type": "string",
						"description": "The unique identifier for the policy. Must be an IRI."
					},
					"profile": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						],
						"description": "The profile(s) this policy conforms to. IRIs identifying the ODRL Profile(s)."
					},
					"assigner": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/OdrlParty"
							}
						],
						"description": "The assigner of the policy. Applies to all rules unless overridden at rule level."
					},
					"assignee": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/OdrlParty"
							}
						],
						"description": "The assignee of the policy. Applies to all rules unless overridden at rule level."
					},
					"target": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/OdrlAsset"
							},
							{
								"type": "array",
								"items": {
									"anyOf": [
										{
											"type": "string"
										},
										{
											"$ref": "#/components/schemas/OdrlAsset"
										}
									]
								}
							}
						],
						"description": "The target asset for the rule."
					},
					"action": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ActionType"
							},
							{
								"$ref": "#/components/schemas/OdrlAction"
							},
							{
								"type": "array",
								"items": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ActionType"
										},
										{
											"$ref": "#/components/schemas/OdrlAction"
										}
									]
								}
							}
						],
						"description": "The action associated with the rule."
					},
					"inheritFrom": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						],
						"description": "The parent policy(ies) this policy inherits from. IRIs identifying the parent Policy(ies)."
					},
					"conflict": {
						"$ref": "#/components/schemas/ConflictStrategyType"
					},
					"permission": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/OdrlPermission"
						},
						"description": "The permissions in the policy. At least one of permission, prohibition, or obligation must be present."
					},
					"prohibition": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/OdrlProhibition"
						},
						"description": "The prohibitions in the policy. At least one of permission, prohibition, or obligation must be present."
					},
					"obligation": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/OdrlDuty"
						},
						"description": "The obligations in the policy. At least one of permission, prohibition, or obligation must be present."
					}
				},
				"required": [
					"@context",
					"@type",
					"uid"
				],
				"additionalProperties": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/JsonLdNodePrimitive"
						},
						{
							"$ref": "#/components/schemas/JsonLdLanguageMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIndexMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIncludedBlock"
						},
						{
							"$ref": "#/components/schemas/JsonLdIdMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdTypeMap"
						},
						{
							"type": "array"
						}
					]
				},
				"description": "Interface representing an ODRL Policy."
			},
			"OdrlProhibition": {
				"type": "object",
				"properties": {
					"@context": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@id": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@included": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"@graph": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdNodeObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdNodeObject"
								}
							}
						]
					},
					"@nest": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdJsonObject"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdJsonObject"
								}
							}
						]
					},
					"@type": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonLdKeyword"
							},
							{
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/JsonLdKeyword"
								}
							}
						]
					},
					"@reverse": {
						"type": "object",
						"additionalProperties": {
							"$ref": "#/components/schemas/JsonLdKeyword"
						}
					},
					"@index": {
						"$ref": "#/components/schemas/JsonLdKeyword"
					},
					"uid": {
						"type": "string",
						"description": "Optional unique identifier for the rule."
					},
					"action": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ActionType"
							},
							{
								"$ref": "#/components/schemas/OdrlAction"
							},
							{
								"type": "array",
								"items": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ActionType"
										},
										{
											"$ref": "#/components/schemas/OdrlAction"
										}
									]
								}
							}
						],
						"description": "The action associated with the rule."
					},
					"target": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/OdrlAsset"
							},
							{
								"type": "array",
								"items": {
									"anyOf": [
										{
											"type": "string"
										},
										{
											"$ref": "#/components/schemas/OdrlAsset"
										}
									]
								}
							}
						],
						"description": "The target asset for the rule."
					},
					"assigner": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/OdrlParty"
							}
						],
						"description": "The assigner of the rule."
					},
					"assignee": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/OdrlParty"
							}
						],
						"description": "The assignee of the rule."
					},
					"constraint": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/OdrlConstraint"
						},
						"description": "Constraints applied to the rule."
					},
					"summary": {
						"type": "string",
						"description": "Additional relation sub-properties as defined in ODRL profiles. For example, 'summary' in profile \"http://example.com/odrl:profile:03\" indicates where the output should be stored."
					},
					"remedy": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/OdrlDuty"
						},
						"description": "The remedies that must be fulfilled if prohibition is violated."
					}
				},
				"additionalProperties": {
					"anyOf": [
						{
							"$ref": "#/components/schemas/JsonLdNodePrimitive"
						},
						{
							"$ref": "#/components/schemas/JsonLdLanguageMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIndexMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdIncludedBlock"
						},
						{
							"$ref": "#/components/schemas/JsonLdIdMap"
						},
						{
							"$ref": "#/components/schemas/JsonLdTypeMap"
						},
						{
							"type": "array"
						}
					]
				},
				"description": "Interface for Prohibition Rules."
			},
			"OperatorType": {
				"anyOf": [
					{
						"type": "string",
						"const": "eq",
						"description": "Equal type."
					},
					{
						"type": "string",
						"const": "gt",
						"description": "Greater than type."
					},
					{
						"type": "string",
						"const": "gteq",
						"description": "Greater than or equal to type."
					},
					{
						"type": "string",
						"const": "lt",
						"description": "Less than type."
					},
					{
						"type": "string",
						"const": "lteq",
						"description": "Less than or equal to type."
					},
					{
						"type": "string",
						"const": "neq",
						"description": "Not equal to type."
					},
					{
						"type": "string",
						"const": "isA",
						"description": "Is a type."
					},
					{
						"type": "string",
						"const": "hasPart",
						"description": "Has part type."
					},
					{
						"type": "string",
						"const": "isPartOf",
						"description": "Is part of type."
					},
					{
						"type": "string",
						"const": "isAllOf",
						"description": "Is all of type."
					},
					{
						"type": "string",
						"const": "isAnyOf",
						"description": "Is any of type."
					},
					{
						"type": "string",
						"const": "isNoneOf",
						"description": "Is none of type."
					},
					{
						"type": "string",
						"const": "locTimeEq",
						"description": "Location time equal to type."
					},
					{
						"type": "string",
						"const": "locTimeGteq",
						"description": "Location time greater than or equal to type."
					}
				],
				"description": "The types for ODRL Operators."
			},
			"PapCreateRequest": {
				"type": "object",
				"properties": {
					"policy": {
						"$ref": "#/components/schemas/Omit%3CIOdrlPolicy%2C%22uid%22%3E"
					}
				},
				"required": [
					"policy"
				],
				"additionalProperties": false,
				"description": "The body of the request."
			},
			"PapQueryResponse": {
				"type": "object",
				"properties": {
					"cursor": {
						"type": "string",
						"description": "The cursor for the next page of results, if there are more results available."
					},
					"policies": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/OdrlPolicy"
						},
						"description": "The policies matching the query."
					}
				},
				"required": [
					"policies"
				],
				"additionalProperties": false,
				"description": "The body of the response."
			},
			"PapUpdateRequest": {
				"type": "object",
				"properties": {
					"policy": {
						"$ref": "#/components/schemas/OdrlPolicy"
					}
				},
				"required": [
					"policy"
				],
				"additionalProperties": false,
				"description": "The body of the request."
			},
			"PolicyType": {
				"anyOf": [
					{
						"type": "string",
						"const": "Policy",
						"description": "Policy type."
					},
					{
						"type": "string",
						"const": "Set",
						"description": "Set type."
					},
					{
						"type": "string",
						"const": "Offer",
						"description": "Offer type."
					},
					{
						"type": "string",
						"const": "Agreement",
						"description": "Agreement type."
					}
				],
				"description": "The types for ODRL Policies."
			},
			"StatusType": {
				"anyOf": [
					{
						"type": "string",
						"const": "active",
						"description": "Active type."
					},
					{
						"type": "string",
						"const": "inactive",
						"description": "Inactive type."
					},
					{
						"type": "string",
						"const": "pending",
						"description": "Pending type."
					},
					{
						"type": "string",
						"const": "revoked",
						"description": "Revoked type."
					}
				],
				"description": "The types for ODRL Status."
			}
		},
		"securitySchemes": {
			"jwtBearerAuthScheme": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	}
}
